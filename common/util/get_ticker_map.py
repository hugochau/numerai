"""
get_ticker_map.py

Util function for mapping signal tickers
"""

__author__ = "Julien Lefebvre, Hugo Chauvary"
__email__ = 'numerai_2021@protonmail.com'

import pandas as pd

from common.config.constant import SIGNAL_DATA_S3


def get_ticker_map():
    # read in yahoo to bloomberg ticker map, still a work in progress, h/t wsouza
    df_ticker = pd.read_csv(f"{SIGNAL_DATA_S3}/signals_ticker_map_w_bbg.csv")
    df_ticker = df_ticker.rename(columns={"yahoo": "yahoo_ticker"})

    corrections = {
        'AA/ LN': 'AA.L',
        'AO/ LN': 'AO.L',
        'AV/ LN': 'AV.L',
        'BA/ LN': 'BA.L',
        'BP/ LN': 'BP.L',
        'DC/ LN': 'DC.L',
        'HL/ LN': 'HL.L',
        'JD/ LN': 'JD.L',
        'NG/ LN': 'NG.L',
        'QQ/ LN': 'QQ.L',
        'RB/ LN': 'RB.L',
        'RR/ LN': 'RR.L',
        'SN/ LN': 'SN.L',
        'TW/ LN': 'TW.L',
        'UU/ LN': 'UU.L',
        'WG/ LN': 'WG.L',
        'BT/A LN': 'BT-A.L',
        'BPI PM': 'BPHLY',
        'BRK/B US': 'BRK-B',
        'ALFA SS': 'ALFVY',
        'ARJOB SS': 'ARJO-B.ST',
        'EPIA SS': 'EPI-A.ST',
        'FI-N SW': '0QP4.IL',
        'FRCB MK': '0128.KL',
        'GENM MK': '4715.KL',
        'IHH MK': '5225.KL',
        'INDUC SS': 'INDU-C.ST',
        'JAK MK': 'JAKS.KL',
        'KLOVB SS': 'KLOV-B.ST',
        'LATOB SS': 'LATO-B.ST',
        'LGF/A US': 'LGF-A',
        'LGF/B US': 'LGF-B',
        'MSGB MK': '8583.KL',
        'NESZ MK': 'NESM.KL',
        'NOBINA SS': 'NOBINA.ST',
        'PETD MK': '5681.KL',
        'PGOLD PM': 'PGCMF',
        'SAPE MK': '5218.KL',
        'SIME MK': 'SIME.KL',
        'TLEVICPO MF': 'TLEVISACPO.MX',
        'UMWOG MK': '4588.KL',
        'VSI MK': '6963.KL',
        'WPRTS MK': '5246.KL',
        'OPT AU': 'OPT.AX',
        'CUV AU': 'CUV.AX',
        'DEG AU': 'DEG.AX',
        'AFG AU': 'AFG.AX',
        'RBL AU': 'RBL.AX',
        'TPW AU': 'TPW.AX',
        'BTH AU': 'BTH.AX',
        'NIC AU': 'NIC.AX',
        'UWL AU': 'UWL.AX',
        'PBH AU': 'PBH.AX',
        'WSP AU': 'WSP.AX',
        '451 HK': '0451.HK',
        '1608 HK': '1608.HK',
        'FUTU US': 'FUTU',
        'SATS SP': 'S58.SI',
        'ST SP': 'Z77.SI',
        'UGHC SP': '8K7.SI',
        'NETLINK SP': 'CJLU.SI',
        'SSIA IJ': 'SSIA.JK',
        'TOWR IJ': 'TOWR.JK',
        '004000 KS': '004000.KS',
        '011760 KS': '011760.KS',
        '175330 KS': '175330.KS',
        '138250 KS': '138250.KS',
        '013890 KS': '013890.KS',
        '084850 KS': '084850.KQ',
        'TDC MK': '5031.KL',
        'T MK': '4863.KL',
        'MPI MK': '3867.KL',
        'PEP MK': '4065.KL',
        'DOGT MK': '7204.KL',
        'JHMC MK': '0127.KL',
        'SCI MK': '4731.KL',
        'AWC TB': 'AWC.BK',
        'CFP/ CA': 'CFP.TO',
        'ONEX/ CA': 'ONEX.TO',
        'VGP BB': 'VGP.BR',
        'SHUR BB': 'SHUR.BR',
        'QTCOM FH': 'QTCOM.HE',
        'KOJAMO FH': 'KOJAMO.HE',
        'VLA FP': 'VLA.PA',
        'TKTT FP': 'TKTT.PA',
        'VLTSA FP': 'VLTSA.PA',
        'SBS GR': 'SBS.DE',
        'VBK GR': 'VBK.DE',
        'SHF GR': 'SHF.DE',
        'COP GR': 'COP.DE',
        'SFQ GR': 'SFQ.DE',
        'INS GR': 'INS.DE',
        'TOT ID': 'T7O.IR',
        'OGN ID': 'OIZ.IR',
        'CVAL IM': 'CVAL.MI',
        'BST IM': 'BST.MI',
        'DIB IM': 'DIB.MI',
        'ALFEN NA': 'ALFEN.AS',
        'ODL NO': 'ODL.OL',
        'FDR SM': 'FDR.MC',
        'XVIVO SS': 'XVIVO.ST',
        'CAMX SS': 'CAMX.ST',
        'EMBRACB SS': 'EMBRAC-B.ST',
        'MCOV B SS': 'MCOV-B.ST',
        'BHG SS': 'BHG.ST',
        'CMBN SW': 'CMBN.SW',
        'MOLN SW': 'MOLN.SW',
        'PFD LN': 'PFD.L',
        'OXIG LN': 'OXIG.L',
        'ESNT LN': 'ESNT.L',
        'PZC LN': 'PZC.L',
        'ADAP US': 'ADAP',
        'MCS LN': 'MCS.L',
        'SRE LN': 'SRE.L',
        'DGOC LN': 'DGOC.L',
        'TYMN LN': 'TYMN.L',
        'ENOG LN': 'ENOG.L',
        'SFOR LN': 'SFOR.L',
        'BAG LN': 'BAG.L',
        '2874 JP': '2874.T',
        '6800 JP': '6800.T',
        '4970 JP': '4970.T',
        '7867 JP': '7867.T',
        '7337 JP': '7337.T',
        '6387 JP': '6387.T',
        '9010 JP': '9010.T',
        '2384 JP': '2384.T',
        '9090 JP': '9090.T',
        '3932 JP': '3932.T',
        '3479 JP': '3479.T',
        '3635 JP': '3635.T',
        '7034 JP': '7034.T',
        'SITESB1 MF': 'SITESB-1.MX',
        'AAN US': 'AAN',
        'CVCO US': 'CVCO',
        'LANC US': 'LANC',
        'SXT US': 'SXT',
        'TMX US': 'TMX',
        'LNTH US': 'LNTH',
        'ARA US': 'ARA',
        'SLDB US': 'SLDB',
        'KLDO US': 'KLDO',
        'SITM US': 'SITM',
        'SASR US': 'SASR',
        'CCMP US': 'CCMP',
        'ATHX US': 'ATHX',
    }

    for old, new in corrections.items():
        if old in df_ticker['bloomberg_ticker'].values:
            df_ticker.loc[df_ticker['bloomberg_ticker'] == old, 'yahoo_ticker'] = new

        else:
            columns = {'ticker': old, 'bloomberg_ticker': old, 'yahoo_ticker': new}
            df_ticker = df_ticker.append(columns,
                                         ignore_index=True)

    return df_ticker